package org.spl;

import java.util.ArrayList;
import java.util.HashMap;

public class Static {
    public final static HashMap<State, HashMap<Symbol, State>> transitionMap = new HashMap<State, HashMap<Symbol, State>>();
    public final static HashMap<State, Token> tokenMap = new HashMap<State, Token>();
    public final static ArrayList<State> acceptStateList = new ArrayList<State>();

    static {
        // Transition map
        HashMap<Symbol, State> map;

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.STAR, State.OPERATOR);
        map.put(Symbol.PLUS, State.OPERATOR);
        map.put(Symbol.PERCENT, State.OPERATOR);
        map.put(Symbol.COLON, State.OPERATOR);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.ASSIGNMENT);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.LESS_THAN, State.LESS_THAN);
        map.put(Symbol.GREATER_THAN, State.GREATER_THAN);
        map.put(Symbol.AMPERSAND, State.AMPERSAND);
        map.put(Symbol.BAR, State.BAR);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.START, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.IDENTIFIER);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.STAR, State.OPERATOR);
        map.put(Symbol.PLUS, State.OPERATOR);
        map.put(Symbol.PERCENT, State.OPERATOR);
        map.put(Symbol.COLON, State.OPERATOR);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.ASSIGNMENT);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.LESS_THAN, State.LESS_THAN);
        map.put(Symbol.GREATER_THAN, State.GREATER_THAN);
        map.put(Symbol.AMPERSAND, State.AMPERSAND);
        map.put(Symbol.BAR, State.BAR);
        map.put(Symbol.UNDERSCORE, State.IDENTIFIER);
        map.put(Symbol.DOT, State.FIELD);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.IDENTIFIER, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.STAR, State.OPERATOR);
        map.put(Symbol.PLUS, State.OPERATOR);
        map.put(Symbol.PERCENT, State.OPERATOR);
        map.put(Symbol.COLON, State.OPERATOR);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.ASSIGNMENT);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.LESS_THAN, State.LESS_THAN);
        map.put(Symbol.GREATER_THAN, State.GREATER_THAN);
        map.put(Symbol.AMPERSAND, State.AMPERSAND);
        map.put(Symbol.BAR, State.BAR);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.NUMERIC, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.STAR, State.OPERATOR);
        map.put(Symbol.PLUS, State.OPERATOR);
        map.put(Symbol.PERCENT, State.OPERATOR);
        map.put(Symbol.COLON, State.OPERATOR);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.ASSIGNMENT);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.LESS_THAN, State.LESS_THAN);
        map.put(Symbol.GREATER_THAN, State.GREATER_THAN);
        map.put(Symbol.AMPERSAND, State.AMPERSAND);
        map.put(Symbol.BAR, State.BAR);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.BRACKET, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.PUNCTUATION, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.PUNCTUATION, State.PUNCTUATION);
        map.put(Symbol.SLASH, State.SLASH);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.OPERATOR, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.EQUAL);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.ASSIGNMENT, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EQUAL_SIGN, State.LESS_THAN_OR_EQUAL);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.LESS_THAN, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EQUAL_SIGN, State.GREATER_THAN_OR_EQUAL);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.GREATER_THAN, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.EQUAL_SIGN, State.NOT_EQUAL);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.EXCLAMATION_MARK, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.MINUS, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.EQUAL, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.LESS_THAN_OR_EQUAL, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.GREATER_THAN_OR_EQUAL, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.NOT_EQUAL, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.AND, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.MINUS, State.MINUS);
        map.put(Symbol.EXCLAMATION_MARK, State.EXCLAMATION_MARK);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.OR, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        map.put(Symbol.DIGIT, State.NUMERIC);
        map.put(Symbol.BRACKET, State.BRACKET);
        map.put(Symbol.STAR, State.MULTI_LINE_COMMENT);
        map.put(Symbol.SLASH, State.ONE_LINE_COMMENT);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.START);
        map.put(Symbol.SPACE, State.START);
        transitionMap.put(State.SLASH, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.IDENTIFIER);
        transitionMap.put(State.FIELD, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.AMPERSAND, State.AND);
        transitionMap.put(State.AMPERSAND, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.BAR, State.OR);
        transitionMap.put(State.BAR, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.MULTI_LINE_COMMENT);
        map.put(Symbol.DIGIT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.BRACKET, State.MULTI_LINE_COMMENT);
        map.put(Symbol.PUNCTUATION, State.MULTI_LINE_COMMENT);
        map.put(Symbol.STAR, State.STAR);
        map.put(Symbol.PLUS, State.MULTI_LINE_COMMENT);
        map.put(Symbol.PERCENT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.COLON, State.MULTI_LINE_COMMENT);
        map.put(Symbol.MINUS, State.MULTI_LINE_COMMENT);
        map.put(Symbol.EXCLAMATION_MARK, State.MULTI_LINE_COMMENT);
        map.put(Symbol.EQUAL_SIGN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.SLASH, State.START);
        map.put(Symbol.LESS_THAN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.GREATER_THAN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.AMPERSAND, State.MULTI_LINE_COMMENT);
        map.put(Symbol.BAR, State.MULTI_LINE_COMMENT);
        map.put(Symbol.UNDERSCORE, State.MULTI_LINE_COMMENT);
        map.put(Symbol.DOT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.NEW_LINE, State.MULTI_LINE_COMMENT);
        map.put(Symbol.TAB, State.MULTI_LINE_COMMENT);
        map.put(Symbol.SPACE, State.MULTI_LINE_COMMENT);
        transitionMap.put(State.STAR, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.ONE_LINE_COMMENT);
        map.put(Symbol.DIGIT, State.ONE_LINE_COMMENT);
        map.put(Symbol.BRACKET, State.ONE_LINE_COMMENT);
        map.put(Symbol.PUNCTUATION, State.ONE_LINE_COMMENT);
        map.put(Symbol.STAR, State.ONE_LINE_COMMENT);
        map.put(Symbol.PLUS, State.ONE_LINE_COMMENT);
        map.put(Symbol.PERCENT, State.ONE_LINE_COMMENT);
        map.put(Symbol.COLON, State.ONE_LINE_COMMENT);
        map.put(Symbol.MINUS, State.ONE_LINE_COMMENT);
        map.put(Symbol.EXCLAMATION_MARK, State.ONE_LINE_COMMENT);
        map.put(Symbol.EQUAL_SIGN, State.ONE_LINE_COMMENT);
        map.put(Symbol.SLASH, State.ONE_LINE_COMMENT);
        map.put(Symbol.LESS_THAN, State.ONE_LINE_COMMENT);
        map.put(Symbol.GREATER_THAN, State.ONE_LINE_COMMENT);
        map.put(Symbol.AMPERSAND, State.ONE_LINE_COMMENT);
        map.put(Symbol.BAR, State.ONE_LINE_COMMENT);
        map.put(Symbol.UNDERSCORE, State.ONE_LINE_COMMENT);
        map.put(Symbol.DOT, State.ONE_LINE_COMMENT);
        map.put(Symbol.NEW_LINE, State.START);
        map.put(Symbol.TAB, State.ONE_LINE_COMMENT);
        map.put(Symbol.SPACE, State.ONE_LINE_COMMENT);
        transitionMap.put(State.ONE_LINE_COMMENT, map);

        map = new HashMap<Symbol, State>();
        map.put(Symbol.LETTER, State.MULTI_LINE_COMMENT);
        map.put(Symbol.DIGIT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.BRACKET, State.MULTI_LINE_COMMENT);
        map.put(Symbol.PUNCTUATION, State.MULTI_LINE_COMMENT);
        map.put(Symbol.STAR, State.STAR);
        map.put(Symbol.PLUS, State.MULTI_LINE_COMMENT);
        map.put(Symbol.PERCENT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.COLON, State.MULTI_LINE_COMMENT);
        map.put(Symbol.MINUS, State.MULTI_LINE_COMMENT);
        map.put(Symbol.EXCLAMATION_MARK, State.MULTI_LINE_COMMENT);
        map.put(Symbol.EQUAL_SIGN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.SLASH, State.MULTI_LINE_COMMENT);
        map.put(Symbol.LESS_THAN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.GREATER_THAN, State.MULTI_LINE_COMMENT);
        map.put(Symbol.AMPERSAND, State.MULTI_LINE_COMMENT);
        map.put(Symbol.BAR, State.MULTI_LINE_COMMENT);
        map.put(Symbol.UNDERSCORE, State.MULTI_LINE_COMMENT);
        map.put(Symbol.DOT, State.MULTI_LINE_COMMENT);
        map.put(Symbol.NEW_LINE, State.MULTI_LINE_COMMENT);
        map.put(Symbol.TAB, State.MULTI_LINE_COMMENT);
        map.put(Symbol.SPACE, State.MULTI_LINE_COMMENT);
        transitionMap.put(State.MULTI_LINE_COMMENT, map);

        // Token map
        tokenMap.put(State.IDENTIFIER, Token.IDENTIFIER);
        tokenMap.put(State.NUMERIC, Token.NUMERIC);
        tokenMap.put(State.BRACKET, Token.BRACKET);
        tokenMap.put(State.PUNCTUATION, Token.PUNCTUATION);
        tokenMap.put(State.OPERATOR, Token.OPERATOR);
        tokenMap.put(State.ASSIGNMENT, Token.OPERATOR);
        tokenMap.put(State.LESS_THAN, Token.OPERATOR);
        tokenMap.put(State.GREATER_THAN, Token.OPERATOR);
        tokenMap.put(State.EXCLAMATION_MARK, Token.OPERATOR);
        tokenMap.put(State.MINUS, Token.OPERATOR);
        tokenMap.put(State.EQUAL, Token.OPERATOR);
        tokenMap.put(State.LESS_THAN_OR_EQUAL, Token.OPERATOR);
        tokenMap.put(State.GREATER_THAN_OR_EQUAL, Token.OPERATOR);
        tokenMap.put(State.NOT_EQUAL, Token.OPERATOR);
        tokenMap.put(State.AND, Token.OPERATOR);
        tokenMap.put(State.OR, Token.OPERATOR);
        tokenMap.put(State.SLASH, Token.OPERATOR);
//        tokenMap.put(State.AMPERSAND, Token.OPERATOR);
//        tokenMap.put(State.BAR, Token.OPERATOR);
        tokenMap.put(State.STAR, Token.OPERATOR);
        tokenMap.put(State.FIELD, Token.FIELD);

        // Accept state list
        acceptStateList.add(State.START);
        acceptStateList.add(State.IDENTIFIER);
        acceptStateList.add(State.NUMERIC);
        acceptStateList.add(State.BRACKET);
        acceptStateList.add(State.PUNCTUATION);
        acceptStateList.add(State.OPERATOR);
        acceptStateList.add(State.ASSIGNMENT);
        acceptStateList.add(State.LESS_THAN);
        acceptStateList.add(State.GREATER_THAN);
        acceptStateList.add(State.EXCLAMATION_MARK);
        acceptStateList.add(State.MINUS);
        acceptStateList.add(State.EQUAL);
        acceptStateList.add(State.LESS_THAN_OR_EQUAL);
        acceptStateList.add(State.GREATER_THAN_OR_EQUAL);
        acceptStateList.add(State.NOT_EQUAL);
        acceptStateList.add(State.AND);
        acceptStateList.add(State.OR);
        acceptStateList.add(State.SLASH);
        acceptStateList.add(State.FIELD);
    }
}
